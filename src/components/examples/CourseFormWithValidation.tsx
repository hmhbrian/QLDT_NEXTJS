import React from "react";
import {
  useCourseFormValidation,
  CourseValidationDisplay,
  CourseValidationSummary,
} from "@/components/courses/CourseValidation";
import { useCourseOperations } from "@/stores/course-store";
import type { Course } from "@/lib/types";

/**
 * Example component demonstrating how to use the enhanced course store
 * with validation and error handling
 */
export function CourseFormWithValidation() {
  const { addCourseWithValidation } = useCourseOperations();
  const {
    course,
    updateField,
    validation,
    canSubmit,
    handleSubmit,
    resetForm,
  } = useCourseFormValidation();

  const [isSubmitting, setIsSubmitting] = React.useState(false);
  const [submitResult, setSubmitResult] = React.useState<{
    success: boolean;
    message?: string;
  } | null>(null);

  const onSubmit = async () => {
    setIsSubmitting(true);
    setSubmitResult(null);

    const result = await handleSubmit(async (courseData) => {
      // Cast to full Course for the API
      const fullCourse: Course = {
        id: "", // Will be generated by API
        title: courseData.title || "",
        courseCode: courseData.courseCode || "",
        description: courseData.description || "",
        objectives: courseData.objectives || "",
        category: courseData.category || "programming",
        instructor: courseData.instructor || "Giảng viên",
        duration: courseData.duration || { sessions: 1, hoursPerSession: 1 },
        learningType: "online",
        startDate: courseData.startDate || null,
        endDate: courseData.endDate || null,
        location: courseData.location || "Trực tuyến",
        image: courseData.image || "https://placehold.co/600x400.png",
        status: courseData.status || "draft",
        department: courseData.department || [],
        level: courseData.level || [],
        materials: courseData.materials || [],
        createdAt: new Date().toISOString(),
        modifiedAt: new Date().toISOString(),
        createdBy: "Admin",
        modifiedBy: "Admin",
        enrollmentType: courseData.enrollmentType || "optional",
        registrationDeadline: courseData.registrationDeadline || null,
        enrolledTrainees: [],
        isPublic:
          courseData.isPublic !== undefined ? courseData.isPublic : true,
        maxParticipants: courseData.maxParticipants || 25,
      };

      await addCourseWithValidation(fullCourse, { optimistic: true });
    });

    setIsSubmitting(false);

    if (result.success) {
      setSubmitResult({
        success: true,
        message: "Khóa học đã được tạo thành công!",
      });
      resetForm(); // Reset form after successful submission
    } else {
      setSubmitResult({
        success: false,
        message: result.error || "Có lỗi xảy ra khi tạo khóa học",
      });
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg">
      <h1 className="text-2xl font-bold mb-6 text-gray-900">
        Tạo Khóa Học Mới (Với Validation)
      </h1>

      {/* Submit Result */}
      {submitResult && (
        <div
          className={`mb-6 p-4 rounded-md ${
            submitResult.success
              ? "bg-green-50 border border-green-200 text-green-800"
              : "bg-red-50 border border-red-200 text-red-800"
          }`}
        >
          {submitResult.message}
        </div>
      )}

      {/* Validation Summary */}
      <div className="mb-6">
        <CourseValidationSummary course={course} />
      </div>

      {/* Form Fields */}
      <div className="space-y-6">
        {/* Basic Information */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Tên khóa học *
            </label>
            <input
              type="text"
              value={course.title || ""}
              onChange={(e) => updateField("title", e.target.value)}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                validation.errors.title ? "border-red-300" : "border-gray-300"
              }`}
              placeholder="Nhập tên khóa học"
            />
            {validation.errors.title && (
              <p className="mt-1 text-sm text-red-600">
                {validation.errors.title}
              </p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Mã khóa học *
            </label>
            <input
              type="text"
              value={course.courseCode || ""}
              onChange={(e) =>
                updateField("courseCode", e.target.value.toUpperCase())
              }
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                validation.errors.courseCode
                  ? "border-red-300"
                  : "border-gray-300"
              }`}
              placeholder="VD: JS101"
            />
            {validation.errors.courseCode && (
              <p className="mt-1 text-sm text-red-600">
                {validation.errors.courseCode}
              </p>
            )}
          </div>
        </div>

        {/* Description */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Mô tả *
          </label>
          <textarea
            value={course.description || ""}
            onChange={(e) => updateField("description", e.target.value)}
            rows={4}
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
              validation.errors.description
                ? "border-red-300"
                : "border-gray-300"
            }`}
            placeholder="Mô tả chi tiết về khóa học"
          />
          {validation.errors.description && (
            <p className="mt-1 text-sm text-red-600">
              {validation.errors.description}
            </p>
          )}
        </div>

        {/* Objectives */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Mục tiêu *
          </label>
          <textarea
            value={course.objectives || ""}
            onChange={(e) => updateField("objectives", e.target.value)}
            rows={3}
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
              validation.errors.objectives
                ? "border-red-300"
                : "border-gray-300"
            }`}
            placeholder="Mục tiêu học tập của khóa học"
          />
          {validation.errors.objectives && (
            <p className="mt-1 text-sm text-red-600">
              {validation.errors.objectives}
            </p>
          )}
        </div>

        {/* Duration */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Số buổi học
            </label>
            <input
              type="number"
              value={course.duration?.sessions || 1}
              onChange={(e) =>
                updateField("duration", {
                  ...course.duration,
                  sessions: parseInt(e.target.value) || 1,
                })
              }
              min="1"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Giờ/buổi
            </label>
            <input
              type="number"
              step="0.5"
              value={course.duration?.hoursPerSession || 1}
              onChange={(e) =>
                updateField("duration", {
                  ...course.duration,
                  hoursPerSession: parseFloat(e.target.value) || 1,
                })
              }
              min="0.5"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Số học viên tối đa
            </label>
            <input
              type="number"
              value={course.maxParticipants || 25}
              onChange={(e) =>
                updateField("maxParticipants", parseInt(e.target.value) || 25)
              }
              min="1"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        {/* Dates */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Ngày bắt đầu
            </label>
            <input
              type="date"
              value={course.startDate?.split("T")[0] || ""}
              onChange={(e) =>
                updateField(
                  "startDate",
                  e.target.value ? new Date(e.target.value).toISOString() : null
                )
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Ngày kết thúc
            </label>
            <input
              type="date"
              value={course.endDate?.split("T")[0] || ""}
              onChange={(e) =>
                updateField(
                  "endDate",
                  e.target.value ? new Date(e.target.value).toISOString() : null
                )
              }
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                validation.errors.endDate ? "border-red-300" : "border-gray-300"
              }`}
            />
            {validation.errors.endDate && (
              <p className="mt-1 text-sm text-red-600">
                {validation.errors.endDate}
              </p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Hạn đăng ký
            </label>
            <input
              type="date"
              value={course.registrationDeadline?.split("T")[0] || ""}
              onChange={(e) =>
                updateField(
                  "registrationDeadline",
                  e.target.value ? new Date(e.target.value).toISOString() : null
                )
              }
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                validation.errors.registrationDeadline
                  ? "border-red-300"
                  : "border-gray-300"
              }`}
            />
            {validation.errors.registrationDeadline && (
              <p className="mt-1 text-sm text-red-600">
                {validation.errors.registrationDeadline}
              </p>
            )}
          </div>
        </div>

        {/* Optional Fields */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Địa điểm
            </label>
            <input
              type="text"
              value={course.location || ""}
              onChange={(e) => updateField("location", e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Địa điểm tổ chức"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Loại đăng ký
            </label>
            <select
              value={course.enrollmentType || "optional"}
              onChange={(e) => updateField("enrollmentType", e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="optional">Tự nguyện</option>
              <option value="mandatory">Bắt buộc</option>
            </select>
          </div>
        </div>
      </div>

      {/* Validation Display */}
      <div className="mt-6">
        <CourseValidationDisplay course={course} />
      </div>

      {/* Submit Button */}
      <div className="mt-8 flex justify-end space-x-4">
        <button
          type="button"
          onClick={() => resetForm()}
          className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          Đặt lại
        </button>
        <button
          type="button"
          onClick={onSubmit}
          disabled={!canSubmit || isSubmitting}
          className={`px-6 py-2 rounded-md text-white font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 ${
            canSubmit && !isSubmitting
              ? "bg-blue-600 hover:bg-blue-700"
              : "bg-gray-400 cursor-not-allowed"
          }`}
        >
          {isSubmitting ? "Đang tạo..." : "Tạo khóa học"}
        </button>
      </div>

      {/* Debug Info (development only) */}
      {process.env.NODE_ENV === "development" && (
        <details className="mt-8 p-4 bg-gray-50 rounded-md">
          <summary className="cursor-pointer font-medium text-gray-700">
            Debug Info (Development)
          </summary>
          <pre className="mt-2 text-xs overflow-auto">
            {JSON.stringify({ course, validation }, null, 2)}
          </pre>
        </details>
      )}
    </div>
  );
}

export default CourseFormWithValidation;
